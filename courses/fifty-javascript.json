{
    "problems": [
        {
            "title": "1. Hello World",
            "difficulty": 1,
            "description": "Write a program which returns the string ;'Hello world';",
            "cases": [
                {
                    "input": "[]",
                    "output": "'Hello world'",
                    "explanation": ";x() // 'Hello world';\nThe function should always return \"Hello world\""
                },
                {
                    "input": "[10,'hello',[]]",
                    "output": "'Hello world'",
                    "explanation": ";x(10,'hello',[]) // 'Hello world';\nThe function should always return \"Hello world\""
                }
            ]
        },
        {
            "title": "2. Simple Calculator",
            "difficulty": 1,
            "description": "Create a function that takes two numbers and an operator (+, -, *, /) as arguments and performs the corresponding operation.",
            "cases": [
                {
                    "input": "[5, 3, '+']",
                    "output": "8",
                    "explanation": ";calculate(5, 3, '+') // 8;\nThe function should perform addition."
                },
                {
                    "input": "[10, 2, '*']",
                    "output": "20",
                    "explanation": ";calculate(10, 2, '*') // 20;\nThe function should perform multiplication."
                }
            ]
        },
        {
            "title": "3. Odd or Even",
            "difficulty": 1,
            "description": "Write a function that determines if a given number is odd or even. Print 'Odd' or 'Even' accordingly.",
            "cases": [
                {
                    "input": "[7]",
                    "output": "'Odd'",
                    "explanation": ";checkOddEven(7) // 'Odd';\nThe function should correctly identify odd numbers."
                },
                {
                    "input": "[12]",
                    "output": "'Even'",
                    "explanation": ";checkOddEven(12) // 'Even';\nThe function should correctly identify even numbers."
                }
            ]
        },
        {
            "title": "4. Array Sum",
            "difficulty": 1,
            "description": "Write a function that calculates the sum of all elements in an array. This problem introduces array manipulation.",
            "cases": [
                {
                    "input": "[1, 2, 3, 4, 5]",
                    "output": "15",
                    "explanation": ";calculateArraySum([1, 2, 3, 4, 5]) // 15;\nThe function should sum all elements in the array."
                },
                {
                    "input": "[10, -5, 8, 2]",
                    "output": "15",
                    "explanation": ";calculateArraySum([10, -5, 8, 2]) // 15;\nThe function should handle negative numbers."
                }
            ]
        },
        {
            "title": "5. Reverse Array",
            "difficulty": 1,
            "description": "Create a function that reverses the elements of an array. For example, [1, 2, 3] becomes [3, 2, 1].",
            "cases": [
                {
                    "input": "[1, 2, 3, 4, 5]",
                    "output": "[5, 4, 3, 2, 1]",
                    "explanation": ";reverseArray([1, 2, 3, 4, 5]) // [5, 4, 3, 2, 1];\nThe function should reverse the order of array elements."
                },
                {
                    "input": "['a', 'b', 'c']",
                    "output": "['c', 'b', 'a']",
                    "explanation": ";reverseArray(['a', 'b', 'c']) // ['c', 'b', 'a'];\nThe function should handle arrays of strings."
                }
            ]
        },
        {
            "title": "6. Factorial",
            "difficulty": 1,
            "description": "Write a function that calculates the factorial of a given number. This problem introduces recursion.",
            "cases": [
                {
                    "input": "[5]",
                    "output": "120",
                    "explanation": ";calculateFactorial(5) // 120;\nThe function should calculate the factorial of 5."
                },
                {
                    "input": "[0]",
                    "output": "1",
                    "explanation": ";calculateFactorial(0) // 1;\nThe function should handle the factorial of 0."
                }
            ]
        },
        {
            "title": "7. Fibonacci Sequence",
            "difficulty": 2,
            "description": "Write a function that generates the first n terms of the Fibonacci sequence. The Fibonacci sequence is defined by the recurrence relation: F(n) = F(n-1) + F(n-2) with initial conditions F(0) = 0 and F(1) = 1.",
            "cases": [
                {
                    "input": "[5]",
                    "output": "[0, 1, 1, 2, 3]",
                    "explanation": ";generateFibonacci(5) // [0, 1, 1, 2, 3];\nThe function should generate the first 5 terms of the Fibonacci sequence."
                },
                {
                    "input": "[8]",
                    "output": "[0, 1, 1, 2, 3, 5, 8, 13]",
                    "explanation": ";generateFibonacci(8) // [0, 1, 1, 2, 3, 5, 8, 13];\nThe function should generate the first 8 terms of the Fibonacci sequence."
                }
            ]
        },
        {
            "title": "8. Palindrome Checker",
            "difficulty": 3,
            "description": "Write a function that checks if a given string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.",
            "cases": [
                {
                    "input": "['level']",
                    "output": "true",
                    "explanation": ";isPalindrome('level') // true;\nThe function should identify 'level' as a palindrome."
                },
                {
                    "input": "['hello']",
                    "output": "false",
                    "explanation": ";isPalindrome('hello') // false;\nThe function should recognize 'hello' as not a palindrome."
                }
            ]
        },
        {
            "title": "9. Prime Number Checker",
            "difficulty": 2,
            "description": "Write a function that determines whether a given number is prime or not. This problem involves basic number theory and conditionals.",
            "cases": [
                {
                    "input": "[7]",
                    "output": "true",
                    "explanation": ";isPrime(7) // true;\nThe function should correctly identify 7 as a prime number."
                },
                {
                    "input": "[10]",
                    "output": "false",
                    "explanation": ";isPrime(10) // false;\nThe function should correctly identify 10 as not a prime number."
                }
            ]
        },
        {
            "title": "10. Simple ToDo List",
            "difficulty": 2,
            "description": "Create a simple command-line ToDo list application. Users should be able to add, remove, and list tasks.",
            "cases": [
                {
                    "input": "['Add: Buy groceries', 'List', 'Remove: 1', 'List']",
                    "output": "['Task added: Buy groceries', 'Tasks: Buy groceries', 'Task removed: Buy groceries', 'Tasks: ']",
                    "explanation": ";todoList(['Add: Buy groceries', 'List', 'Remove: 1', 'List']) // ['Task added: Buy groceries', 'Tasks: Buy groceries', 'Task removed: Buy groceries', 'Tasks: '];\nThe function should perform basic ToDo list operations."
                },
                {
                    "input": "['Add: Read book', 'Add: Exercise', 'List', 'Remove: 2', 'List']",
                    "output": "['Task added: Read book', 'Task added: Exercise', 'Tasks: Read book, Exercise', 'Task removed: Exercise', 'Tasks: Read book']",
                    "explanation": ";todoList(['Add: Read book', 'Add: Exercise', 'List', 'Remove: 2', 'List']) // ['Task added: Read book', 'Task added: Exercise', 'Tasks: Read book, Exercise', 'Task removed: Exercise', 'Tasks: Read book'];\nThe function should handle multiple ToDo list operations."
                }
            ]
        },
        {
            "title": "11. Find Maximum Number",
            "difficulty": 1,
            "description": "Write a function that takes an array of numbers as an argument and returns the maximum number in the array.",
            "cases": [
                {
                    "input": "[5, 8, 2, 1, 10]",
                    "output": "10",
                    "explanation": ";findMaxNumber([5, 8, 2, 1, 10]) // 10;\nThe function should correctly identify 10 as the maximum number."
                },
                {
                    "input": "[-3, 0, -7, -1]",
                    "output": "0",
                    "explanation": ";findMaxNumber([-3, 0, -7, -1]) // 0;\nThe function should handle negative numbers and correctly identify 0 as the maximum number."
                }
            ]
        },
        {
            "title": "12. Vowel Counter",
            "difficulty": 1,
            "description": "Write a function that counts the number of vowels in a given string. Consider both uppercase and lowercase vowels.",
            "cases": [
                {
                    "input": "['Hello World']",
                    "output": "3",
                    "explanation": ";countVowels('Hello World') // 3;\nThe function should correctly count the vowels in 'Hello World'."
                },
                {
                    "input": "['Programming is Fun']",
                    "output": "6",
                    "explanation": ";countVowels('Programming is Fun') // 6;\nThe function should correctly count the vowels in 'Programming is Fun'."
                }
            ]
        },
        {
            "title": "13. Power Function",
            "difficulty": 1,
            "description": "Write a function that calculates the power of a number. The function should take two parameters: the base and the exponent.",
            "cases": [
                {
                    "input": "[2, 3]",
                    "output": "8",
                    "explanation": ";calculatePower(2, 3) // 8;\nThe function should correctly calculate 2 raised to the power of 3."
                },
                {
                    "input": "[5, 2]",
                    "output": "25",
                    "explanation": ";calculatePower(5, 2) // 25;\nThe function should correctly calculate 5 raised to the power of 2."
                }
            ]
        },
        {
            "title": "14. Average Calculator",
            "difficulty": 1,
            "description": "Write a function that calculates the average of an array of numbers.",
            "cases": [
                {
                    "input": "[4, 7, 12, 5, 8]",
                    "output": "7.2",
                    "explanation": ";calculateAverage([4, 7, 12, 5, 8]) // 7.2;\nThe function should correctly calculate the average of the given array."
                },
                {
                    "input": "[1, 2, 3, 4, 5, 6]",
                    "output": "3.5",
                    "explanation": ";calculateAverage([1, 2, 3, 4, 5, 6]) // 3.5;\nThe function should correctly calculate the average of the given array."
                }
            ]
        },
        {
            "title": "15. Array Deduplication",
            "difficulty": 3,
            "description": "Write a function that removes duplicate elements from an array and returns a new array without duplicates.",
            "cases": [
                {
                    "input": "[1, 2, 2, 3, 4, 4, 5]",
                    "output": "[1, 2, 3, 4, 5]",
                    "explanation": ";removeDuplicates([1, 2, 2, 3, 4, 4, 5]) // [1, 2, 3, 4, 5];\nThe function should remove duplicates from the given array."
                },
                {
                    "input": "[10, 20, 30, 10, 40, 20]",
                    "output": "[10, 20, 30, 40]",
                    "explanation": ";removeDuplicates([10, 20, 30, 10, 40, 20]) // [10, 20, 30, 40];\nThe function should remove duplicates from the given array."
                }
            ]
        },
        {
            "title": "16. String Capitalization",
            "difficulty": 3,
            "description": "Write a function that capitalizes the first letter of each word in a given sentence.",
            "cases": [
                {
                    "input": "['hello world']",
                    "output": "'Hello World'",
                    "explanation": ";capitalizeWords('hello world') // 'Hello World';\nThe function should capitalize the first letter of each word in the given sentence."
                },
                {
                    "input": "['programming is fun']",
                    "output": "'Programming Is Fun'",
                    "explanation": ";capitalizeWords('programming is fun') // 'Programming Is Fun';\nThe function should capitalize the first letter of each word in the given sentence."
                }
            ]
        },
        {
            "title": "Problem 17: Leap Year Checker",
            "difficulty": 1,
            "description": "Write a function that determines if a given year is a leap year. Leap years are divisible by 4, but if a year is divisible by 100, it must also be divisible by 400."
        },
        {
            "title": "Problem 18: Array Rotation",
            "description": "Write a function that rotates the elements of an array to the left by a given number of positions."
        },
        {
            "title": "Problem 19: Median Finder",
            "description": "Write a function that finds the median of an array of numbers. The median is the middle value when the array is sorted."
        },
        {
            "title": "Problem 20: Common Elements",
            "description": "Write a function that finds and returns the common elements between two arrays."
        },
        {
            "title": "Problem 21: Simple Encryption",
            "description": "Write a function that encrypts a given string using a simple substitution cipher. For example, replace each letter with the one following it in the alphabet."
        },
        {
            "title": "Problem 22: Array Chunking",
            "description": "Write a function that divides an array into smaller arrays of a specified size."
        },
        {
            "title": "Problem 23: Array Flattening",
            "description": "Write a function that flattens a nested array, transforming it into a one-dimensional array."
        },
        {
            "title": "Problem 24: Prime Factorization",
            "description": "Write a function that returns the prime factorization of a given number."
        },
        {
            "title": "Problem 25: Digit Sum",
            "description": "Write a function that calculates the sum of the digits of a given number."
        },
        {
            "title": "Problem 26: Anagram Detector",
            "description": "Write a function that checks if two strings are anagrams of each other."
        },
        {
            "title": "Problem 27: Array Shuffling",
            "description": "Write a function that shuffles the elements of an array randomly."
        },
        {
            "title": "Problem 28: Caesar Cipher (Advanced)",
            "description": "Enhance your previous Caesar cipher function to include a customizable shift value and handle both encryption and decryption."
        },
        {
            "title": "Problem 29: FizzBuzz (Advanced)",
            "description": "Revisit the classic FizzBuzz problem, but this time, allow customizable rules for different numbers and phrases."
        },
        {
            "title": "Problem 30: Binary to Decimal Converter",
            "description": "Write a function that converts a binary number (given as a string) to its decimal equivalent."
        },
        {
            "title": "Problem 31: Decimal to Binary Converter",
            "description": "Write a function that converts a decimal number to its binary equivalent."
        },
        {
            "title": "Problem 32: Bubble Sort",
            "description": "Implement the bubble sort algorithm to sort an array in ascending order."
        },
        {
            "title": "Problem 33: Linear Search",
            "description": "Implement the linear search algorithm to find the index of a given element in an array."
        },
        {
            "title": "Problem 34: Concatenation",
            "description": "Write a function that concatenates two arrays without using the built-in array concatenation method."
        },
        {
            "title": "Problem 35: Palindrome Number",
            "description": "Write a function that checks if a given number is a palindrome."
        },
        {
            "title": "Problem 36: Unique Paths",
            "description": "Given a grid of m x n dimensions, write a function to calculate the number of unique paths to reach the bottom-right corner. You can only move down or to the right."
        },
        {
            "title": "Problem 37: Parentheses Checker",
            "description": "Write a function that checks if a given string of parentheses is balanced. For example, '(()())' is balanced, but '(()' is not."
        },
        {
            "title": "Problem 38: Two Sum",
            "description": "Given an array of integers, find two numbers such that they add up to a specific target sum. Return the indices of the two numbers."
        },
        {
            "title": "Problem 39: Binary Search (Advanced)",
            "description": "Enhance your binary search implementation to handle an array of objects and allow custom comparison functions."
        },
        {
            "title": "Problem 40: String Rotation",
            "description": "Write a function that determines if one string is a rotation of another. For example, 'waterbottle' is a rotation of 'erbottlewat'."
        },
        {
            "title": "Problem 41: Substring Search",
            "description": "Write a function that checks if a given substring exists within a larger string."
        },
        {
            "title": "Problem 42: Digital Root",
            "description": "Write a function that finds the digital root of a given non-negative integer. The digital root is the recursive sum of all the digits until a single-digit number is obtained."
        },
        {
            "title": "Problem 43: Matrix Multiplication",
            "description": "Write a function that multiplies two matrices. This problem involves matrix manipulation and algorithms."
        },
        {
            "title": "Problem 44: Run-Length Encoding",
            "description": "Write a function that performs run-length encoding on a given string. Replace repeated characters with the count followed by the character."
        },
        {
            "title": "Problem 45: Run-Length Decoding",
            "description": "Write a function that performs run-length decoding on a given string. Convert the encoded string back to its original form."
        },
        {
            "title": "Problem 46: Sum of Primes",
            "description": "Write a function that calculates the sum of the first n prime numbers."
        },
        {
            "title": "Problem 47: Power Set",
            "description": "Write a function that generates the power set of a given set. The power set is the set of all subsets, including the empty set and the set itself."
        },
        {
            "title": "Problem 48: String Compression",
            "description": "Write a function that performs basic string compression. Replace repeated characters with the character followed by the count."
        },
        {
            "title": "Problem 49: Square Root Approximation",
            "description": "Write a function that approximates the square root of a given non-negative integer using the Babylonian method."
        },
        {
            "title": "Problem 50: Collatz Conjecture",
            "description": "Write a function that tests the Collatz conjecture for a given starting number. The conjecture states that no matter which positive integer n you start with, repeatedly applying the following rule will eventually reach the value 1: if n is even, divide it by 2; if n is odd, multiply it by 3 and add 1."
        }
    ]
}